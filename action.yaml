name: Flutter Coverage Action üéØ
description: A GitHub Action to generate and deploy coverage reports to GitHub Pages with style! ‚ú®
author: ProjectAJ14

branding:
  icon: thumbs-up    # üëç Because we're awesome!
  color: blue        # üåä Ocean blue vibes

inputs:
  coverage_base_dir:
    description: Base directory for coverage reports üìÅ
    required: false
    default: '.'
  max_reports:
    description: Maximum number of reports to retain üî¢
    required: false
    default: '50'
  debug_mode:
    description: Enable verbose logging for troubleshooting üîç
    required: false
    default: '0'
  comment_on_pr:
    description: Whether to add a comment on the PR with the coverage report link üí¨
    required: false
    default: 'true'


runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        # Input validation
        echo "üîç Validating inputs..."
        
        # Validate coverage_base_dir
        if [[ ! -d "${{ inputs.coverage_base_dir }}/coverage" ]]; then
          echo "‚ùå Error: Coverage base directory '${{ inputs.coverage_base_dir }}/coverage' does not exist!"
          exit 1
        fi
        
        # Validate max_reports is a positive number
        if ! [[ "${{ inputs.max_reports }}" =~ ^[1-9][0-9]*$ ]]; then
          echo "‚ùå Error: max_reports must be a positive number!"
          exit 1
        fi
        
        # Validate debug_mode is 0 or 1
        if [[ "${{ inputs.debug_mode }}" != "0" && "${{ inputs.debug_mode }}" != "1" ]]; then
          echo "‚ùå Error: debug_mode must be either 0 or 1!"
          exit 1
        fi
        
        echo "‚úÖ Input validation successful!"

    - name: Setup Windows Dependencies
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "üîß Installing required Windows dependencies..."
        if ! command -v yq &> /dev/null; then
          choco install yq
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install yq!"
            exit 1
          fi
        fi
        echo "‚úÖ Windows dependencies installed successfully!"

    - name: Generate Coverage from lcov
      id: generate-coverage
      shell: bash
      run: |
        echo "üìä Generating coverage report..."
        
        # Check if lcov is installed
        if ! command -v lcov &> /dev/null; then
        echo "üì¶ Installing lcov..."
        sudo apt-get update && sudo apt-get install -y lcov=2.0-4ubuntu2
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to install lcov!"
        exit 1
        fi
        fi
        
        # Validate lcov.info exists
        if [[ ! -f "${{ inputs.coverage_base_dir }}/coverage/lcov.info" ]]; then
        echo "‚ùå Error: ${{ inputs.coverage_base_dir }}/coverage/lcov.info not found!"
        exit 1
        fi
        
        # Create html directory if it doesn't exist
        mkdir -p "${{ inputs.coverage_base_dir }}/coverage/html"
        
        # Generate HTML report
        pwd
        ls
        genhtml "${{ inputs.coverage_base_dir }}/coverage/lcov.info" \
        -o "${{ inputs.coverage_base_dir }}/coverage/html" \
        --keep-going --missed --show-proportion \
        --show-navigation --show-details --hierarchical \
        --title "Coverage" \
        --header-title "Coverage Report For PR#${{ github.event.pull_request.number }}"
        
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to generate coverage report!"
        exit 1
        fi
        
        echo "‚úÖ Coverage report generated successfully!"

    - name: Configure Git
      shell: bash
      run: |
        echo "üîß Configuring Git..."
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        echo "‚úÖ Git configured successfully!"

    - name: Prepare Deploy Script
      shell: bash
      run: |
        echo "üìù Preparing deploy script..."
        if [[ ! -f "$GITHUB_ACTION_PATH/src/script.sh" ]]; then
          echo "‚ùå Error: Deploy script not found!"
          exit 1
        fi
        chmod +x "$GITHUB_ACTION_PATH/src/script.sh"
        echo "‚úÖ Deploy script prepared successfully!"

    - name: Generate and Deploy Coverage
      id: coverage-deploy
      shell: bash
      env:
        COVERAGE_BASE_DIR: "${{ inputs.coverage_base_dir }}/coverage"
      run: |
        echo "üöÄ Deploying coverage report..."
        
        # Debug mode logging
        if [[ "${{ inputs.debug_mode }}" == "1" ]]; then
          set -x
        fi
        
        $GITHUB_ACTION_PATH/src/script.sh \
          "${{ github.repository }}" \
          "${{ github.event.pull_request.number }}" \
          "$GITHUB_TOKEN" \  # Use the environment variable     
          "${{ inputs.max_reports }}" \
          "${{ inputs.debug_mode }}"
        
        if [ $? -ne 0 ]; then
          echo "‚ùå Failed to deploy coverage report!"
          exit 1
        fi
        
        # Export URLs for use in the comment step
        echo "coverage_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage/pr-${{ github.event.pull_request.number }}/" >> $GITHUB_OUTPUT
        echo "index_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/coverage/" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Coverage report deployed successfully!"
    - name: Add Coverage Report Comment
      if: inputs.comment_on_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const commentBody = `## üìä Coverage Report Summary
          
          Hey there! üëã Your coverage report is ready!
          
          ### üîó Quick Links
          
          - [View Coverage Report for PR #${context.payload.pull_request.number}](${process.env.COVERAGE_URL})
          - [View All Coverage Reports](${process.env.INDEX_URL})
          
          > ü§ñ This report was automatically generated by the Flutter Coverage Action.
          > 
          > üí° If you find this helpful, consider giving the action a ‚≠ê!`;
          
          try {
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
            console.log('‚úÖ Comment added successfully!');
          } catch (error) {
            console.error('‚ùå Failed to add comment:', error);
            throw error;
          }
      env:
        COVERAGE_URL: ${{ steps.coverage-deploy.outputs.coverage_url }}
        INDEX_URL: ${{ steps.coverage-deploy.outputs.index_url }}